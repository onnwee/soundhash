[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

[tool.mypy]
python_version = "3.11"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_calls = false
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
strict_optional = true
ignore_missing_imports = true
# Be lenient for now, can be tightened later
no_implicit_optional = true
strict_equality = false
show_error_codes = true
pretty = true

# SQLAlchemy plugin for better ORM support
plugins = ["sqlalchemy.ext.mypy.plugin"]

# Per-module options
[[tool.mypy.overrides]]
module = "src.core.*"
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = "src.database.*"
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = "src.ingestion.*"
disallow_untyped_defs = true
warn_unreachable = false

# Ignore modules not in scope for strict type checking
[[tool.mypy.overrides]]
module = [
    "config.*",
    "src.api.*",
    "src.bots.*",
    "src.auth.*",
]
ignore_errors = true

# Ignore stubs for packages without proper type support
[[tool.mypy.overrides]]
module = [
    "librosa.*",
    "scipy.*",
    "soundfile.*",
    "yt_dlp.*",
    "ffmpeg.*",
    "tweepy.*",
    "praw.*",
    "uvicorn.*",
    "colorlog.*",
    "tqdm.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q"
testpaths = [
    "tests",
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
]
